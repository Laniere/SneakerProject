using System.Collections.ObjectModel;
using Microsoft.AspNetCore.Mvc;
using SneakerServer.Repository;

namespace SneakerServer.Controllers;

[ApiController]
[Route("[controller]")]
public class UserController(ILogger<UserController> logger, SneakerContext context) : ControllerBase //controller add ViewBag and ViewResult. not necessary for pure asp.net core WebAPI
{
  private readonly ILogger<UserController> _logger = logger;
  private UnitOfWork _uok = new(context);

  [HttpGet("{id}")]
  [ProducesResponseType(200)] // This attribute produces more descriptive response details for web API help pages generated by tools like Swagger
  [ProducesResponseType(404)]
  public IActionResult Get(int id)
  {
    User? user = _uok.UserRepository.GetById(id);
    return user == null ? NotFound() : Ok(user);
  }

  // Framework design guidelines recommend using the class Collection when you need to return a collection that is modifiable by the caller or ReadOnlyCollection for read only collections
  [HttpGet()]
  [ProducesResponseType(200)]
  public IActionResult GetAll()
  {
    IEnumerable<User> users = _uok.UserRepository.GetAll();
    return Ok(users);
  }

  [HttpPost()]
  [ProducesResponseType(200)]
  public IActionResult Insert(User user)
  {
    _uok.UserRepository.Insert(user);
    _uok.Save();
    return Ok(user);
  }

  [HttpPatch()]
  [ProducesResponseType(200)]
  [ProducesResponseType(400)]
  public IActionResult Update(User user)
  {
    _uok.UserRepository.Update(user);
    _uok.Save();
    return Ok(user);
  }

  [HttpDelete()]
  [ProducesResponseType(200)]
  [ProducesResponseType(400)]
  public IActionResult Delete(int id)
  {
    _uok.UserRepository.Delete(id);
    _uok.Save();
    return Ok();
  }
}