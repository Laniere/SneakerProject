
namespace SneakerServer.Controllers;

[ApiController]
[Route("[controller]")]
[Authorize]
public class UserController(ILogger<UserController> logger, SneakerContext context) : ControllerBase //controller add ViewBag and ViewResult. not necessary for pure asp.net core WebAPI
{
  private readonly ILogger<UserController> _logger = logger;
  private readonly SneakerContext _context = context;

  [HttpGet("{id}")]
  [ProducesResponseType(200)] // This attribute produces more descriptive response details for web API help pages generated by tools like Swagger
  [ProducesResponseType(404)]
  public async Task<ActionResult<User>> Get(int id)
  {
    User? user = await _context.Users.FindAsync(id);
    return user == null ? NotFound() : Ok(user);
  }

  // Framework design guidelines recommend using the class Collection when you need to return a collection that is modifiable by the caller or ReadOnlyCollection for read only collections
  [HttpGet()]
  [ProducesResponseType(200)]
  public async Task<ActionResult<IEnumerable<User>>> GetAll()
  {
    IEnumerable<User> users = await _context.Users.ToListAsync();
    return Ok(users);
  }

  [HttpPost()]
  [ProducesResponseType(200)]
  public async Task<ActionResult<User>> Insert(User user)
  {
    await _context.AddAsync(user);
    await _context.SaveChangesAsync();
    return Ok(user);
  }

  [HttpPatch()]
  [ProducesResponseType(200)]
  [ProducesResponseType(400)]
  public async Task<ActionResult<User>> Update(User user)
  {
    _context.Update(user);
    await _context.SaveChangesAsync();
    return Ok(user);
  }

  [HttpDelete()]
  [ProducesResponseType(200)]
  [ProducesResponseType(400)]
  public async Task<ActionResult> Delete(int id)
  {
    User? user = await _context.Users.FindAsync(id);
    if (user != null)
    {
      _context.Users.Remove(user);
      await _context.SaveChangesAsync();
      return Ok();
    }
    else
    {
      return NotFound();
    }
  }
}